PROGRAM SimpleShoppingBag
    USE System.Drawing
    USE Figgle

    FUNCTION Main()
        // Declare and initialize shopping list arrays
        DECLARE shoppingListArray AS ARRAY OF ARRAY OF STRING
        DECLARE userShoppingList AS ARRAY OF ARRAY OF STRING

        shoppingListArray <- [
            ["4,99", "Bread"],
            ["1,99", "Milk"],
            ["0,99", "Egg"],
            ["2,99", "Apple"],
            ["3,99", "Cheese"],
            ["0,99", "Butter"],
            ["1,99", "Orange"],
            ["2,99", "Banana"],
            ["1,99", "Pineapple"],
            ["0,99", "Tomato"],
            ["1,99", "Potato"],
            ["1,99", "Carrot"],
            ["1,99", "Cucumber"],
            ["1,99", "Onion"],
            ["1,99", "Garlic"],
            ["1,99", "Ginger"],
            ["1,99", "Lemon"],
            ["1,99", "Lime"],
            ["1,99", "Peach"],
            ["1,99", "Pear"],
            ["1,99", "Strawberry"],
            ["1,99", "Raspberry"],
            ["1,99", "Blueberry"],
            ["1,99", "Blackberry"],
            ["1,99", "Cherry"],
            ["1,99", "Grape"]
        ]

        // Initialize user shopping list
        userShoppingList <- CREATE ARRAY (shoppingListArray.LENGTH, 2)
        CALL CopyArrays(shoppingListArray, userShoppingList)

        // Display shopping menu
        CALL DisplayMenu(shoppingListArray, userShoppingList)

    FUNCTION CopyArrays(one, two)
        // Copy elements from one array to another
        FOR element FROM 0 TO two.LENGTH - 1
            two[element, 0] <- element.TO_STRING
            two[element, 1] <- 0.TO_STRING

    FUNCTION DisplayMenu(theMenu, userMenu)
        // Initialize variables for key input and selected index
        DECLARE keyInfo AS ConsoleKeyInfo
        DECLARE selectedIndex, currentIndex AS INTEGER

        // Loop until the user presses the Escape key
        REPEAT
            // Clear console and print the menu
            CALL Console.Clear()
            CALL PrintOutTheMenu()
            keyInfo <- GET_KEY_PRESS()

            // Handle user input
            IF keyInfo.Key = ConsoleKey.Enter THEN
                CALL AddItemToBasket()

            IF keyInfo.Key = ConsoleKey.Backspace THEN
                CALL RemoveItemFromBasket()

            CALL GetArrowKeyInput()

        UNTIL keyInfo.Key = ConsoleKey.Escape

    FUNCTION PrintOutTheMenu()
        // Initialize variables for selection and basket status
        DECLARE isSelected, inTheBasket AS BOOLEAN

        // Loop through the menu items
        FOR x FROM 0 TO theMenu.LENGTH - 1
            currentIndex <- x
            inTheBasket <- CALL CheckIfInBasket()
            isSelected <- CALL CheckIfSelected()

            // Print menu item based on selection and basket status
            IF (inTheBasket AND isSelected) OR (NOT inTheBasket AND isSelected) THEN
                CALL SetConsoleColor(ConsoleColor.Green)
                OUTPUT "[ x ] > " + theMenu[x, 1]
                CALL ResetConsoleColor()

            SWITCH inTheBasket
                CASE TRUE AND NOT isSelected
                    CALL SetConsoleColor(ConsoleColor.Red)
                    OUTPUT "[ " + userMenu[x, 1] + " ] > " + theMenu[x, 1]
                    CALL ResetConsoleColor()

                CASE FALSE AND NOT isSelected
                    OUTPUT "[ - ] > " + theMenu[x, 1]

    FUNCTION CheckIfInBasket()
        // Check if the item is in the basket
        DECLARE quantity AS INTEGER
        quantity <- CONVERT_TO_INT(userMenu[currentIndex, 1])
        RETURN quantity > 0

    FUNCTION CheckIfSelected()
        // Check if the item is selected
        RETURN selectedIndex = currentIndex

    FUNCTION AddItemToBasket()
        // Add an item to the basket
        DECLARE quantity AS INTEGER
        quantity <- CONVERT_TO_INT(userMenu[selectedIndex, 1])
        quantity <- quantity + 1
        userMenu[selectedIndex, 1] <- quantity.TO_STRING
        OUTPUT "Added " + theMenu[selectedIndex, 1] + " / " + userMenu[selectedIndex, 1] + " to basket."
        SLEEP(300)

    FUNCTION RemoveItemFromBasket()
        // Remove an item from the basket
        DECLARE quantity AS INTEGER
        quantity <- CONVERT_TO_INT(userMenu[selectedIndex, 1])

        IF quantity > 0 THEN
            quantity <- quantity - 1
            userMenu[selectedIndex, 1] <- quantity.TO_STRING
            OUTPUT "Removed " + theMenu[selectedIndex, 1] + " / " + userMenu[selectedIndex, 1] + " from basket."
            SLEEP(300)

        ELSE
            OUTPUT "Item not in basket."
            SLEEP(300)

    FUNCTION GetArrowKeyInput()
        // Handle arrow key input
        SWITCH keyInfo.Key
            CASE ConsoleKey.UpArrow
                selectedIndex <- selectedIndex - 1

            CASE ConsoleKey.DownArrow
                selectedIndex <- selectedIndex + 1

        // Adjust selected index to stay within bounds
        IF selectedIndex > theMenu.LENGTH - 1
            selectedIndex <- 0

        IF selectedIndex < 0
            selectedIndex <- theMenu.LENGTH - 1
